/**
 * Copyright (c) 2012 Partners In Health.  All rights reserved.
 * The use and distribution terms for this software are covered by the
 * Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
 * which can be found in the file epl-v10.html at the root of this distribution.
 * By using this software in any fashion, you are agreeing to be bound by
 * the terms of this license.
 * You must not remove this notice, or any other, from this software.
 **/

buildscript {
    repositories {
        mavenLocal()
        //mavenCentral()
        maven { url "https://repo1.maven.org/maven2" }
        //maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://repo.grails.org/grails/plugins/" }
        maven { url "https://repo.grails.org/grails/plugins-releases/" }
        maven { url "https://repo.grails.org/grails/core/" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.15.1"
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:2.2.0"
        classpath 'org.grails.plugins:database-migration:3.1.0.RC1'
        classpath "gradle.plugin.com.virgo47.gradle:ClasspathJar:1.0.0"

    }
}

//include gradle-node plugin
plugins {
    id "com.moowork.node" version "0.12"
    id "com.virgo47.ClasspathJar" version "1.0.0"
}

//grails.project.class.dir = "target/classes"
//grails.project.docs.output.dir = "web-app/docs"
//grails.project.test.class.dir = "target/test-classes"
//grails.project.test.reports.dir = "target/test-reports"
//
//grails.plugin.location.liquibase = "liquibase/"

version "0.9.0-SNAPSHOT"
group "com.openboxes"

node {
    version = '10.12.0'
    npmVersion = '6.13.6'
    distBaseUrl = 'https://nodejs.org/dist'
    download = true
}

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply plugin:"com.gorylenko.gradle-git-properties"

repositories {
    mavenLocal()
    //mavenCentral()
    //maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://repo1.maven.org/maven2" }
    maven { url "https://repo.grails.org/grails/plugins/" }
    maven { url "https://repo.grails.org/grails/plugins-releases/" }
    maven { url "https://repo.grails.org/grails/core/" }
//    grailsPlugins()
//    grailsHome()
//    grailsCentral()
//
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    provided "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.16.Final"
    compile "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.15.1"
    testCompile "org.grails:grails-test-mixins:3.3.0"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails.plugins:geb"
    testCompile "org.grails:grails-web-testing-support"
    testCompile "org.grails.plugins:geb:1.1.2"  // before was test(name: 'geb', version: '0.6.3') {}
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1" // was 2.25.0, 2.47.1 was auto-generated by grails 3.3.10
        // excludes "htmlunit"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18" // was 2.10
        // excludes "xml-apis"
    testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:2.47.1" // 2.47.1 was auto-generated by grails 3.3.10
    testRuntime "org.seleniumhq.selenium:selenium-firefox-driver:2.47.1" // was 2.25.0
    testRuntime "org.seleniumhq.selenium:selenium-ie-driver:2.47.1" // was 2.25.0
    testRuntime "org.seleniumhq.selenium:selenium-support:2.47.1"// was 2.25.0

    compile 'org.grails.plugins:database-migration:3.1.0.RC1'
    compile 'org.liquibase:liquibase-core:3.6.1'

    // Required by database connection
    compile "mysql:mysql-connector-java:5.1.47" // latest (5) 5.1.48, latest (8) 8.0.17

    // Required by database connection pool
    compile "com.mchange:c3p0:0.9.5.3" // latest 0.9.5.4

    // Required by docx4j functionality
    compile "org.docx4j:docx4j:2.8.1" // latest 8.1.x
        // excludes "commons-logging:commons-logging:1.0.4", "commons-codec", "commons-io"

    // Required for barcode4j
    compile "com.google.zxing:javase:2.0" // maybe 3.3.1

    // Required by MailService (should replace with grails mail plugin)
    compile "commons-fileupload:commons-fileupload:1.4"
    compile "org.apache.commons:commons-email:1.3" // maybe 1.6-SNAPSHOT
    compile "org.apache.commons:commons-text:1.3" // used to generate sequential identiifers
    compile "commons-beanutils:commons-beanutils:1.9.4"
    compile "commons-lang:commons-lang:2.6" // ok
    compile "org.jadira.usertype:usertype.jodatime:1.9" // maybe 2.1 (but the lates version is from 2012)

    // Required by LDAP
    compile "com.unboundid:unboundid-ldapsdk:2.3.6" // latest version 4.0.1

    // Render Zebra labels
    compile "fr.w3blog:zebra-zpl:0.0.3" // ??

    // Fake SMTP server
    testRuntime "dumbster:dumbster:1.6" // ??

    // Required for GPars
    compile "org.codehaus.gpars:gpars:1.2.1" // latest 1.2.1
    compile "org.codehaus.jsr166-mirror:jsr166y:1.7.0" // ??
    compile "org.codehaus.jsr166-mirror:extra166y:1.7.0" // ??

    // Unknown
    //    build "org.jboss.tattletale:tattletale-ant:1.2.0.Beta2" { excludes "ant", "javassist" }
    //    compile "org.codehaus.groovy.modules.http-builder:http-builder:0.6" {
    //        excludes "xercesImpl", "groovy", "commons-lang", "commons-codec"
    //    }
    // REST client (used by translation and currency services)
    compile "org.apache.httpcomponents:httpclient:4.5.12"

    // Required by functionality (need to be upgraded or replaced)
    compile "org.grails.plugins:rendering:2.0.3" // was 0.4.4
    compile "org.grails.plugins:excel-import:3.0.2" // was 0.3
        // excludes "poi-contrib", "poi-scratchpad"
    compile 'org.grails.plugins:external-config:1.4.0'
    runtime "org.grails.plugins:external-config-reload:1.4.1" // was 1.4.0
    compile "org.grails.plugins:csv:1.0.1" // this is latest Grails version: 1.2 > *

    // Can probably be removed after migration
    runtime "org.grails.plugins:cache-headers:1.1.7" // was 1.1.5
    runtime "org.grails.plugins:resources:1.2.14" // was 1.1.6
    runtime "org.grails.plugins:cached-resources:1.0" // this is latest, Grails version: 1.2 > *
        // excludes "resources", "cache-headers"

    // Still used but probably can be replaced
    compile "org.grails.plugins:barcode4j:0.3" // was 0.2.1
    //compile "org.grails.plugins:pretty-time:3.0.2.Final-1.0.0" // was 0.3
    compile 'org.grails.plugins:grails-pretty-time:4.0.0'
    compile "org.grails.plugins:console:1.5.12" // was 1.1
    compile "org.grails.plugins:image-builder:0.2" // this is latest, Grails version: 1.3.7 > *
    compile "org.grails.plugins:joda-time:1.5" // was 1.4
    //compile "org.grails.plugins:springcache:1.3.1" // this is latest, Grails version: 1.2.0 > *
    compile 'org.grails.plugins:cache:4.0.3'
    compile "org.grails.plugins:webflow:2.1.0" // was 1.3.8
    compile "org.grails.plugins:yui:2.8.2.1" // this is latest, Grails version: 1.2 > *
//    compile "org.grails.plugins:spring-events:1.2" // this is latest, Grails version: 1.2.0 > *

    compile "org.grails.plugins:google-analytics:2.3.3" // was 1.0

    testCompile "org.grails.plugins:code-coverage:2.0.3-3" // was 1.2.5
    compile group: 'io.micronaut', name: 'micronaut-http-client', version: '1.0.0.RC3'

    // new plugins
    compile("org.grails.plugins:sentry:11.7.24")
    compile ('org.grails.plugins:quartz:2.0.13')
    compile 'org.grails.plugins:quartz-monitor:1.3'
    //compile "org.grails.plugins:quartz2:2.1.6.2" // this is latest, Grails version: 1.3.7 > *


    // Replacement for grails remote taglib
    compile ('org.grails.plugins:ajax-tags:1.0.0')

    // Used by PDF rendering plugin
    // NoSuchMethodError: org.springframework.test.context.MergedContextConfiguration.getContextCustomizers()Ljava/util/Set;
    //runtime "org.springframework:spring-test:4.2.1.RELEASE"
    runtime 'org.xhtmlrenderer:core-renderer:R8'
    runtime 'com.lowagie:itext:2.1.0'

    // Used by XLS rendering and Excel Importers
    compile ('org.apache.poi:poi:3.17')

    testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
    testCompile 'org.spockframework:spock-spring:1.1-groovy-2.4'
    compile group: 'org.grails.plugins', name: 'rest-client-builder', version: '2.1.1'


}

sourceSets {
    main {
        resources {
            srcDir 'grails-app/migrations'
        }
    }
}


war {
    archiveName = "openboxes.war"
}

bootRun {
    jvmArgs = ["-Dspring.output.ansi.enabled=always", "-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"]
    addResources = true
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat 'full'
    }
}

assets {
    minifyJs = true
    minifyCss = true

    minifyOptions = [
        languageMode: 'ES6',
        targetLanguage: 'ES5',
        optimizationLevel: 'SIMPLE',
    ]

    excludes = [
        "**/bundle.*.js",
        "**/bundle.*.css",
    ]
}

//Generate webpack bundle when starting up the app
//bootRun.dependsOn(['npmInstall', 'npm_run_bundle'])

//Generate webpack bundle when packaging the app
//assetCompile.dependsOn(['npmInstall', 'npm_run_bundle'])

buildProperties.doLast {
    // Find the right file
    File grailsBuildInfoFile = it.outputs.files.files.find { it.name == 'grails.build.info' }
    if(!grailsBuildInfoFile) return // No need to continue if the file is not there
    Properties properties = new Properties()
    // Read properties from the file
    grailsBuildInfoFile.withInputStream {
        properties.load(it)
    }
    // Add new properties from various sources
    properties.setProperty('build.time', new Date().format("yyyy-MM-dd HH:mm:ss"))
    // Get a System property
    properties.setProperty('build.java.version', System.getProperty('java.version'))
    // Get the host name where the build was created
    properties.setProperty('build.host', InetAddress.localHost.hostName)
    properties.setProperty("build.tag", System.getenv('BUILD_TAG')?: "N/A")
    properties.setProperty("build.username", System.properties['user.name'])

    // Add property set by your CI (in this case Bamboo)
    Map<String, String> env = System.getenv()
    if(env.bamboo_buildNumber) {
        properties.setProperty('build.number', env.bamboo_buildNumber)
        properties.setProperty('build.git.revision', env.bamboo_planRepository_revision)
        properties.setProperty('build.git.branch', env.bamboo_planRepository_branch)
    }

    // Write the properties back to the file
    grailsBuildInfoFile.withOutputStream {
        properties.store(it,null)
    }
}
apply plugin: "com.virgo47.ClasspathJar"

ext {
    dockerBuildDir = mkdir("${buildDir}/docker")
}

task prepareDocker(type: Copy, dependsOn: assemble) {
    description = 'Copy files from ./docker and openboxes.war to Docker temporal build directory'
    group = 'Docker'

    from 'docker/Dockerfile'
    from 'docker/openboxes.yml'
    from 'build/libs/openboxes.war'

    into dockerBuildDir
}
